services:
  postgresql:
    image: postgres:16.4
    env_file:
      - env.d/development/postgresql
    ports:
      - "15432:5432"

  elasticsearch:
    image: elasticsearch:5

  ashley:
    build:
      context: .
      target: development
      args:
        DOCKER_USER: ${DOCKER_USER:-1000}
    user: ${DOCKER_USER:-1000}
    image: ashley:development
    environment:
      PYLINTHOME: /app/.pylint.d
    env_file:
      - env.d/development/aws
      - env.d/development/common
      - env.d/development/postgresql
    ports:
      - "8090:8000"
    volumes:
      - .:/app
      - ./data/static:/data/static
      - ./data/media:/data/media
    depends_on:
      - "postgresql"
      - "elasticsearch"

  dockerize:
    image: jwilder/dockerize

  crowdin:
    image: fundocker/crowdin:2.0.31
    volumes:
      - ".:/app"
    env_file:
      - env.d/development/crowdin
    user: "${DOCKER_USER:-1000}"
    working_dir: /app

  node:
    image: node:14
    working_dir: /app/src/frontend
    user: "${DOCKER_USER:-1000}"
    volumes:
      - .:/app

  terraform:
    image: hashicorp/terraform:0.15.3
    env_file: env.d/terraform
    user: ${DOCKER_USER:-1000}
    working_dir: /app
    volumes:
      - ./terraform:/app

  terraform-state:
    image: hashicorp/terraform:0.15.3
    env_file: env.d/terraform
    user: ${DOCKER_USER:-1000}
    working_dir: /app
    volumes:
      - ./terraform/create_state_bucket:/app
